# Grafana ConfigMap with Healthcare Dashboards
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
data:
  grafana.ini: |
    [analytics]
    check_for_updates = false
    
    [log]
    mode = console
    level = warn
    
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    
    [server]
    http_port = 3000
    root_url = https://grafana.healthcare-platform.com
    
    [security]
    admin_user = admin
    admin_password = $__env{GRAFANA_ADMIN_PASSWORD}
    secret_key = $__env{GRAFANA_SECRET_KEY}
    cookie_secure = true
    cookie_samesite = strict
    content_type_protection = true
    x_content_type_options = true
    x_xss_protection = true
    strict_transport_security = true
    
    [auth]
    disable_login_form = false
    disable_signout_menu = false
    
    [auth.azure_ad]
    enabled = true
    name = Azure AD
    allow_sign_up = true
    client_id = $__env{AZURE_CLIENT_ID}
    client_secret = $__env{AZURE_CLIENT_SECRET}
    scopes = openid email profile
    auth_url = https://login.microsoftonline.com/$__env{AZURE_TENANT_ID}/oauth2/v2.0/authorize
    token_url = https://login.microsoftonline.com/$__env{AZURE_TENANT_ID}/oauth2/v2.0/token
    
    [feature_toggles]
    enable = live
    
    [alerting]
    enabled = true
    execute_alerts = true
    
    [unified_alerting]
    enabled = true

---
# Grafana Datasources
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: true
      jsonData:
        timeInterval: 15s
        queryTimeout: 60s
        httpMethod: POST
    
    - name: Loki
      type: loki
      access: proxy
      url: http://loki:3100
      editable: true
      jsonData:
        maxLines: 1000
        timeout: 60s
    
    - name: Tempo
      type: tempo
      access: proxy
      url: http://tempo:3200
      editable: true
      jsonData:
        tracesToLogsV2:
          datasourceUid: 'loki'
          tags: ['job', 'instance', 'pod', 'namespace']
          mappedTags: [{ key: 'service.name', value: 'service' }]
          mapTagNamesEnabled: false
          spanStartTimeShift: '1h'
          spanEndTimeShift: '-1h'
          filterByTraceID: false
          filterBySpanID: false
        tracesToMetrics:
          datasourceUid: 'prometheus'
          tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
          queries:
            - name: 'Sample query'
              query: 'sum(rate(tempo_spanmetrics_latency_bucket{$$__tags}[5m]))'
        serviceMap:
          datasourceUid: 'prometheus'
        search:
          hide: false
        nodeGraph:
          enabled: true
    
    - name: Azure Monitor
      type: grafana-azure-monitor-datasource
      access: proxy
      jsonData:
        subscriptionId: $__env{AZURE_SUBSCRIPTION_ID}
        tenantId: $__env{AZURE_TENANT_ID}
        clientId: $__env{AZURE_CLIENT_ID}
        cloudName: azuremonitor
        azureLogAnalyticsSameAs: true
      secureJsonData:
        clientSecret: $__env{AZURE_CLIENT_SECRET}

---
# Grafana Dashboard ConfigMaps
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-providers
  namespace: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'Healthcare Platform'
      orgId: 1
      folder: 'Healthcare'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards/healthcare
    - name: 'Infrastructure'
      orgId: 1
      folder: 'Infrastructure'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards/infrastructure
    - name: 'HIPAA Compliance'
      orgId: 1
      folder: 'Compliance'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards/compliance

---
# Healthcare Platform Overview Dashboard
apiVersion: v1
kind: ConfigMap
metadata:
  name: healthcare-overview-dashboard
  namespace: monitoring
data:
  healthcare-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Healthcare Platform Overview",
        "tags": ["healthcare", "overview"],
        "timezone": "UTC",
        "panels": [
          {
            "id": 1,
            "title": "API Gateway Request Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(gateway_requests_total[5m]))",
                "legendFormat": "Requests/sec"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {"mode": "palette-classic"},
                "custom": {"drawStyle": "line"},
                "unit": "reqps"
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Response Time P95",
            "type": "stat",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, sum(rate(gateway_request_duration_seconds_bucket[5m])) by (le))",
                "legendFormat": "P95 Latency"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {"mode": "thresholds"},
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": null},
                    {"color": "yellow", "value": 0.1},
                    {"color": "red", "value": 0.5}
                  ]
                },
                "unit": "s"
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Error Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(gateway_requests_total{status=~\"5..\"}[5m])) / sum(rate(gateway_requests_total[5m])) * 100",
                "legendFormat": "Error Rate %"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {"mode": "thresholds"},
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": null},
                    {"color": "yellow", "value": 1},
                    {"color": "red", "value": 5}
                  ]
                },
                "unit": "percent"
              }
            },
            "gridPos": {"h": 8, "w": 8, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Active Processing Jobs",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(data_processing_jobs_active)",
                "legendFormat": "Active Jobs"
              }
            ],
            "gridPos": {"h": 8, "w": 8, "x": 8, "y": 8}
          },
          {
            "id": 5,
            "title": "Data Lake Storage Usage",
            "type": "stat",
            "targets": [
              {
                "expr": "azure_storage_account_used_capacity_bytes / azure_storage_account_total_capacity_bytes * 100",
                "legendFormat": "Storage Usage %"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percent",
                "color": {"mode": "thresholds"},
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": null},
                    {"color": "yellow", "value": 70},
                    {"color": "red", "value": 85}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 8, "x": 16, "y": 8}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "30s"
      }
    }

---
# HIPAA Compliance Dashboard
apiVersion: v1
kind: ConfigMap
metadata:
  name: hipaa-compliance-dashboard
  namespace: monitoring
data:
  hipaa-compliance.json: |
    {
      "dashboard": {
        "id": null,
        "title": "HIPAA Compliance Monitoring",
        "tags": ["hipaa", "compliance", "security"],
        "timezone": "UTC",
        "panels": [
          {
            "id": 1,
            "title": "Data Access Attempts",
            "type": "timeseries",
            "targets": [
              {
                "expr": "sum(rate(security_data_access_total[5m])) by (status)",
                "legendFormat": "{{status}} access"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Unauthorized Access Attempts",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(increase(security_unauthorized_access_total[1h]))",
                "legendFormat": "Unauthorized Attempts"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {"mode": "thresholds"},
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": null},
                    {"color": "yellow", "value": 5},
                    {"color": "red", "value": 10}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Data Export Activities",
            "type": "timeseries",
            "targets": [
              {
                "expr": "sum(rate(data_export_total[5m])) by (user_type)",
                "legendFormat": "{{user_type}} exports"
              }
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Encryption Status",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(encryption_enabled)",
                "legendFormat": "Encrypted Resources"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 16}
          },
          {
            "id": 5,
            "title": "Audit Log Completeness",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(audit_logs_written) / sum(audit_events_generated) * 100",
                "legendFormat": "Audit Coverage %"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percent",
                "color": {"mode": "thresholds"},
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": null},
                    {"color": "yellow", "value": 95},
                    {"color": "green", "value": 99}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 16}
          }
        ],
        "time": {"from": "now-24h", "to": "now"},
        "refresh": "1m"
      }
    }

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 2
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.1.0
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GRAFANA_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-password
        - name: GRAFANA_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: secret-key
        - name: AZURE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: client-id
        - name: AZURE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: client-secret
        - name: AZURE_TENANT_ID
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: tenant-id
        - name: AZURE_SUBSCRIPTION_ID
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: subscription-id
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboard-providers
          mountPath: /etc/grafana/provisioning/dashboards
        - name: healthcare-dashboards
          mountPath: /var/lib/grafana/dashboards/healthcare
        - name: grafana-storage
          mountPath: /var/lib/grafana
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          timeoutSeconds: 30
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboard-providers
        configMap:
          name: grafana-dashboard-providers
      - name: healthcare-dashboards
        configMap:
          name: healthcare-overview-dashboard
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage

---
# Grafana PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: monitoring
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: managed-premium

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    name: http
  selector:
    app: grafana

---
# Grafana Secrets (to be created manually or via external secrets operator)
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secrets
  namespace: monitoring
type: Opaque
stringData:
  admin-password: "{{ .Values.grafana.adminPassword }}"
  secret-key: "{{ .Values.grafana.secretKey }}"
